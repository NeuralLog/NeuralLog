/*
 * NeuralLog API
 * API documentation for the NeuralLog server
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.neurallog.sdk.api;

import com.neurallog.sdk.client.ApiClient;
import com.neurallog.sdk.client.ApiException;
import com.neurallog.sdk.client.ApiResponse;
import com.neurallog.sdk.client.Pair;

import com.neurallog.sdk.model.LogResponse;
import com.neurallog.sdk.model.LogsLogNameDelete200Response;
import com.neurallog.sdk.model.LogsLogNamePost200Response;
import com.neurallog.sdk.model.LogsResponse;
import java.time.OffsetDateTime;
import com.neurallog.sdk.model.SearchGet200Response;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LogsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public LogsApi() {
    this(new ApiClient());
  }

  public LogsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Get all logs
   * 
   * @param namespace Namespace for the log (optional, default to default)
   * @param limit Maximum number of entries to return (optional, default to 100)
   * @return LogsResponse
   * @throws ApiException if fails to make API call
   */
  public LogsResponse logsGet(String namespace, Integer limit) throws ApiException {
    ApiResponse<LogsResponse> localVarResponse = logsGetWithHttpInfo(namespace, limit);
    return localVarResponse.getData();
  }

  /**
   * Get all logs
   * 
   * @param namespace Namespace for the log (optional, default to default)
   * @param limit Maximum number of entries to return (optional, default to 100)
   * @return ApiResponse&lt;LogsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogsResponse> logsGetWithHttpInfo(String namespace, Integer limit) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = logsGetRequestBuilder(namespace, limit);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("logsGet", localVarResponse);
        }
        return new ApiResponse<LogsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogsResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder logsGetRequestBuilder(String namespace, Integer limit) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/logs";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "namespace";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("namespace", namespace));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Clear a log
   * 
   * @param logName Name of the log (required)
   * @param namespace Namespace for the log (optional, default to default)
   * @return LogsLogNameDelete200Response
   * @throws ApiException if fails to make API call
   */
  public LogsLogNameDelete200Response logsLogNameDelete(String logName, String namespace) throws ApiException {
    ApiResponse<LogsLogNameDelete200Response> localVarResponse = logsLogNameDeleteWithHttpInfo(logName, namespace);
    return localVarResponse.getData();
  }

  /**
   * Clear a log
   * 
   * @param logName Name of the log (required)
   * @param namespace Namespace for the log (optional, default to default)
   * @return ApiResponse&lt;LogsLogNameDelete200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogsLogNameDelete200Response> logsLogNameDeleteWithHttpInfo(String logName, String namespace) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = logsLogNameDeleteRequestBuilder(logName, namespace);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("logsLogNameDelete", localVarResponse);
        }
        return new ApiResponse<LogsLogNameDelete200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogsLogNameDelete200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder logsLogNameDeleteRequestBuilder(String logName, String namespace) throws ApiException {
    // verify the required parameter 'logName' is set
    if (logName == null) {
      throw new ApiException(400, "Missing the required parameter 'logName' when calling logsLogNameDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/logs/{logName}"
        .replace("{logName}", ApiClient.urlEncode(logName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "namespace";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("namespace", namespace));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a log by name
   * 
   * @param logName Name of the log (required)
   * @param namespace Namespace for the log (optional, default to default)
   * @param limit Maximum number of entries to return (optional, default to 100)
   * @return LogResponse
   * @throws ApiException if fails to make API call
   */
  public LogResponse logsLogNameGet(String logName, String namespace, Integer limit) throws ApiException {
    ApiResponse<LogResponse> localVarResponse = logsLogNameGetWithHttpInfo(logName, namespace, limit);
    return localVarResponse.getData();
  }

  /**
   * Get a log by name
   * 
   * @param logName Name of the log (required)
   * @param namespace Namespace for the log (optional, default to default)
   * @param limit Maximum number of entries to return (optional, default to 100)
   * @return ApiResponse&lt;LogResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogResponse> logsLogNameGetWithHttpInfo(String logName, String namespace, Integer limit) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = logsLogNameGetRequestBuilder(logName, namespace, limit);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("logsLogNameGet", localVarResponse);
        }
        return new ApiResponse<LogResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder logsLogNameGetRequestBuilder(String logName, String namespace, Integer limit) throws ApiException {
    // verify the required parameter 'logName' is set
    if (logName == null) {
      throw new ApiException(400, "Missing the required parameter 'logName' when calling logsLogNameGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/logs/{logName}"
        .replace("{logName}", ApiClient.urlEncode(logName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "namespace";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("namespace", namespace));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Append to a log
   * 
   * @param logName Name of the log (required)
   * @param body  (required)
   * @param namespace Namespace for the log (optional, default to default)
   * @return LogsLogNamePost200Response
   * @throws ApiException if fails to make API call
   */
  public LogsLogNamePost200Response logsLogNamePatch(String logName, Object body, String namespace) throws ApiException {
    ApiResponse<LogsLogNamePost200Response> localVarResponse = logsLogNamePatchWithHttpInfo(logName, body, namespace);
    return localVarResponse.getData();
  }

  /**
   * Append to a log
   * 
   * @param logName Name of the log (required)
   * @param body  (required)
   * @param namespace Namespace for the log (optional, default to default)
   * @return ApiResponse&lt;LogsLogNamePost200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogsLogNamePost200Response> logsLogNamePatchWithHttpInfo(String logName, Object body, String namespace) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = logsLogNamePatchRequestBuilder(logName, body, namespace);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("logsLogNamePatch", localVarResponse);
        }
        return new ApiResponse<LogsLogNamePost200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogsLogNamePost200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder logsLogNamePatchRequestBuilder(String logName, Object body, String namespace) throws ApiException {
    // verify the required parameter 'logName' is set
    if (logName == null) {
      throw new ApiException(400, "Missing the required parameter 'logName' when calling logsLogNamePatch");
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling logsLogNamePatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/logs/{logName}"
        .replace("{logName}", ApiClient.urlEncode(logName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "namespace";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("namespace", namespace));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Overwrite a log (clear and add new entries)
   * 
   * @param logName Name of the log (required)
   * @param body  (required)
   * @param namespace Namespace for the log (optional, default to default)
   * @return LogsLogNamePost200Response
   * @throws ApiException if fails to make API call
   */
  public LogsLogNamePost200Response logsLogNamePost(String logName, Object body, String namespace) throws ApiException {
    ApiResponse<LogsLogNamePost200Response> localVarResponse = logsLogNamePostWithHttpInfo(logName, body, namespace);
    return localVarResponse.getData();
  }

  /**
   * Overwrite a log (clear and add new entries)
   * 
   * @param logName Name of the log (required)
   * @param body  (required)
   * @param namespace Namespace for the log (optional, default to default)
   * @return ApiResponse&lt;LogsLogNamePost200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogsLogNamePost200Response> logsLogNamePostWithHttpInfo(String logName, Object body, String namespace) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = logsLogNamePostRequestBuilder(logName, body, namespace);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("logsLogNamePost", localVarResponse);
        }
        return new ApiResponse<LogsLogNamePost200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogsLogNamePost200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder logsLogNamePostRequestBuilder(String logName, Object body, String namespace) throws ApiException {
    // verify the required parameter 'logName' is set
    if (logName == null) {
      throw new ApiException(400, "Missing the required parameter 'logName' when calling logsLogNamePost");
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling logsLogNamePost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/logs/{logName}"
        .replace("{logName}", ApiClient.urlEncode(logName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "namespace";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("namespace", namespace));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Search logs
   * 
   * @param namespace Namespace for the log (optional, default to default)
   * @param limit Maximum number of entries to return (optional, default to 100)
   * @param query Search query (optional)
   * @param logName Filter by log name (optional)
   * @param startTime Start time for filtering (optional)
   * @param endTime End time for filtering (optional)
   * @return SearchGet200Response
   * @throws ApiException if fails to make API call
   */
  public SearchGet200Response searchGet(String namespace, Integer limit, String query, String logName, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
    ApiResponse<SearchGet200Response> localVarResponse = searchGetWithHttpInfo(namespace, limit, query, logName, startTime, endTime);
    return localVarResponse.getData();
  }

  /**
   * Search logs
   * 
   * @param namespace Namespace for the log (optional, default to default)
   * @param limit Maximum number of entries to return (optional, default to 100)
   * @param query Search query (optional)
   * @param logName Filter by log name (optional)
   * @param startTime Start time for filtering (optional)
   * @param endTime End time for filtering (optional)
   * @return ApiResponse&lt;SearchGet200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SearchGet200Response> searchGetWithHttpInfo(String namespace, Integer limit, String query, String logName, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchGetRequestBuilder(namespace, limit, query, logName, startTime, endTime);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchGet", localVarResponse);
        }
        return new ApiResponse<SearchGet200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SearchGet200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchGetRequestBuilder(String namespace, Integer limit, String query, String logName, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/search";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "namespace";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("namespace", namespace));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "query";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("query", query));
    localVarQueryParameterBaseName = "log_name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("log_name", logName));
    localVarQueryParameterBaseName = "start_time";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start_time", startTime));
    localVarQueryParameterBaseName = "end_time";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("end_time", endTime));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
